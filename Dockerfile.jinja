FROM {{ docker_tag }}

ENV LANG C.UTF-8
ENV TZ Asia/Tokyo

{%- set shell_path = {
'bash': '/bin/bash',
'zsh': '/bin/zsh',
'nu': '/usr/local/bin/nu',
} %}

# ============
# System packages
# ============
# Collect packages
{% set packages = "sudo wget curl ssh git zip locales ed less neovim ca-certificates jq python3 python3-pip python3-venv build-essential "
%}

{%- if user_shell == "zsh" -%}
{%- set packages = packages ~ "zsh " -%}
{%- elif user_shell == "nu" -%}
{# https://www.nushell.sh/book/installation.html#debian-ubuntu #}
{%- set packages = packages ~ "pkg-config libssl-dev " -%}
{% endif -%}

{%- if install_pyenv -%}
{# https://github.com/pyenv/pyenv/wiki#suggested-build-environment #}
{%- set packages = packages ~ "libssl-dev zlib1g-dev \
    libbz2-dev libreadline-dev libsqlite3-dev curl \
    libncursesw5-dev xz-utils tk-dev libxml2-dev libxmlsec1-dev libffi-dev liblzma-dev " -%}
{% endif -%}

RUN apt update \
    && DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends {{ packages }}

{% if user_shell == "nu" -%}
# ------------
# Nushell
# ------------
WORKDIR /tmp
RUN NU_INFO=$(curl https://api.github.com/repos/nushell/nushell/releases/latest | jq '\
    .assets | map(select(.name | test("x86_64-unknown-linux-gnu"))) \
    | map( \
    { \
    "filename": .name, \
    "basename": (.name | match("(.*).tar.gz") | .captures[0].string ), \
    "url": .browser_download_url, \
    } \
    ) | .[0]' \
    ) \
    && curl --output - -L $(echo $NU_INFO | jq -r '.url') | tar xz \
    && cd $(echo $NU_INFO | jq -r '.basename') \
    && sudo chmod +x nu \
    && chown root:root nu \
    && mv nu /usr/local/bin/nu
{% endif -%}

{% if install_eza -%}
# ------------
# eza
# ------------
RUN wget -c https://github.com/eza-community/eza/releases/download/{{ install_eza_version }}/eza_x86_64-unknown-linux-gnu.tar.gz -O - | tar xz \
    && sudo chmod +x eza \
    && chown root:root eza \
    && mv eza /usr/local/bin/eza
{% endif -%}

# ============
# User settings
# ============
ARG USER_NAME={{ user_name }}
ARG UID={{ uid }}
ARG GROUP_NAME={{ group_name }}
ARG GID={{ gid }}
ARG GID_WHEEL={{ wheel_gid }}
ARG USER_SHELL={{ shell_path[user_shell] }}
ARG HOME="/home/${USER_NAME}"
ARG LOCAL_BIN="${HOME}/.local/bin"

ENV XDG_CONFIG_HOME="${HOME}/.config"
ENV XDG_CACHE_HOME="${HOME}/.cache"
ENV XDG_DATA_HOME="${HOME}/.local/share"
ENV XDG_STATE_HOME="${HOME}/.local/state"
ENV PATH="${LOCAL_BIN}:${PATH}"

{% if user_shell == "zsh" -%}
ENV ZDOTDIR=${XDG_CONFIG_HOME}/zsh
# RUN echo "\
# export \\\
#     XDG_CONFIG_HOME=\${HOME}/.config \\\
#     XDG_CACHE_HOME=\${HOME}/.cache \\\
#     XDG_DATA_HOME=\${HOME}/.local/share \\\
#     XDG_STATE_HOME=\${HOME}/.local/state \\\
#     ZDOTDIR=\${XDG_CONFIG_HOME}/zsh" >> /etc/zsh/zshenv
{% endif -%}

RUN : \
    {% if user_sudo -%}
&& groupadd --gid ${GID_WHEEL} wheel \
    && echo %wheel ALL=\(ALL\) NOPASSWD:ALL >> /etc/sudoers \
    {% endif -%}
&& if getent group ${GID} >/dev/null 2>&1; then \
    groupmod -n ${GROUP_NAME} $(getent group ${GID} | cut -d: -f1) \
    ; \
    else \
    groupadd --gid ${GID} ${GROUP_NAME} \
    ; \
    fi \
    && if id -u ${UID} >/dev/null 2>&1; then \
    usermod \
    -l ${USER_NAME} \
    -d ${HOME} \
    -g ${GROUP_NAME} \
    {% if user_sudo -%}
-aG wheel \
    {%- endif %}
$(id -nu ${UID}) \
    && chsh -s ${USER_SHELL} ${USER_NAME} \
    && mkdir ${HOME} \
    && chown -R ${USER_NAME}:${GROUP_NAME} ${HOME} \
    ; \
    else \
    useradd --create-home \
    --uid ${UID} \
    --shell ${USER_SHELL} \
    -g ${GROUP_NAME} \
    {% if user_sudo -%}
-G wheel \
    {% endif -%}
${USER_NAME}\
    ; \
    fi

# ============
# Packages
# ============

# ------------
# Initialization
# ------------
# do not switch shell; keep using bash
# switch user
USER ${USER_NAME}

# ensure directories
RUN mkdir -p \
    ${XDG_CONFIG_HOME} \
    ${XDG_CACHE_HOME} \
    ${XDG_DATA_HOME} \
    ${XDG_STATE_HOME} \
    ${LOCAL_BIN} \
    {% if user_shell == "zsh" -%}
${ZDOTDIR} \
    {% endif -%}
${HOME}

# ------------
# Shell settings
# ------------
{% if user_shell == "zsh" -%}
# ------------
# * zsh
# ------------
{% if install_prezto -%}
# ------------
# ** prezto
# ------------
ENV ZPREZTODIR=${XDG_DATA_HOME}/prezto
ENV ZPREZTO_COMP_EXT=${ZPREZTODIR}/modules/completion/external/src

RUN git clone --recursive \
    https://github.com/sorin-ionescu/prezto.git ${XDG_DATA_HOME}/prezto \
    && echo "source \${ZPREZTODIR}/init.zsh" >> ${ZDOTDIR}/.zshrc

{% if settings_prezto -%}
COPY home/.config/zsh/zpreztorc ${XDG_CONFIG_HOME}/zsh/zpreztorc
{% endif -%}
{% endif -%}
{% elif user_shell == "nu" -%}
# ------------
# * Nushell
# ------------
{% endif -%}

# RUN echo "\
# export \\\
#     XDG_CONFIG_HOME=\${HOME}/.config \\\
#     XDG_CACHE_HOME=\${HOME}/.cache \\\
#     XDG_DATA_HOME=\${HOME}/.local/share \\\
#     XDG_STATE_HOME=\${HOME}/.local/state \\\
#     ZDOTDIR=\${XDG_CONFIG_HOME}/zsh" >> /etc/zsh/zshenv

{% if install_pyenv -%}
# ------------
# pyenv
# ------------
ENV DIR_PYENV=${XDG_DATA_HOME}/pyenv

RUN git clone https://github.com/pyenv/pyenv ${DIR_PYENV} \
    && cd ${DIR_PYENV} \
    && src/configure \
    && make -C src \ 
    && ln -s ${DIR_PYENV}/libexec/pyenv ${LOCAL_BIN}/pyenv

ENV PATH=${DIR_PYENV}/bin:${PATH}

{% if user_shell == "bash" -%}
RUN echo 'eval "$(pyenv init -)"' >> ${HOME}/.bashrc
{% elif user_shell == "zsh" -%}
RUN echo 'eval "$(pyenv init -)"' >> ${ZDOTDIR}/.zshrc
{% endif -%}

{% if install_pyenv_pyver -%}
RUN eval "$(pyenv init -)" \
    && pyenv install {{ install_pyenv_pyver }}
{% endif -%}
{% endif -%}

# ------------
# Pip package installation
# ------------
{%- set pip_packages = "" -%}
{%- if install_poetry -%}
# ------------
# * poetry
# ------------
{% set pip_packages = pip_packages ~ "poetry " -%}
{% endif -%}

{%- if install_pipx -%}
# ------------
# * pipx
# ------------
{% set pip_packages = pip_packages ~ "pipx " -%}
{% endif -%}

# ------------
# * do
# ------------
{% set pip_packages = pip_packages.strip() -%}
{% if pip_packages != "" -%}
RUN python3 -m pip install {{ pip_packages }}
{% endif -%}

{% if install_lean -%}
# ------------
# Lean
# ------------
ENV ELAN_HOME="${XDG_DATA_HOME}/elan"
ENV PATH="${ELAN_HOME}/bin:${PATH}"
RUN curl https://raw.githubusercontent.com/leanprover/elan/master/elan-init.sh -sSf \
    | sh -s -- -y --no-modify-path \
    --default-toolchain {{ install_lean_toolchain }}
{%- endif %}

{% if install_rust -%}
# ------------
# Rust
# ------------
ENV RUSTUP_HOME=${XDG_DATA_HOME}/rustup
ENV CARGO_HOME=${XDG_DATA_HOME}/cargo
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --no-modify-path
{% if user_shell == "bash" -%}
RUN echo 'source ${HOME}/.local/share/cargo/env' >> ${HOME}/.bashrc
{% elif user_shell == "zsh" -%}
RUN echo 'source ${HOME}/.local/share/cargo/env' >> ${ZDOTDIR}/.zshrc
{%- endif %}
{%- endif %}

{% if install_nvm -%}
# ------------
# Node.js
# ------------
ENV NVM_DIR=${XDG_DATA_HOME}/nvm
ENV NPM_CONFIG_USERCONFIG=${XDG_CONFIG_HOME}/npm/npmrc
RUN : \
    && mkdir -p ${NVM_DIR} \
    && curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/{{ install_nvm_version }}/install.sh | bash \
    && . ${NVM_DIR}/nvm.sh \
    && nvm install {{ install_node_version }} \
    && :
{%- endif %}

# ============
# Entrypoint
# ============
CMD ["{{ shell_path[user_shell] }}"]
